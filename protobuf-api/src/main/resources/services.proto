package de.uniluebeck.itm.tr.protobuf;

option java_abstract_services = true;

################################################
#################### COMMON ####################
################################################

message SecretAuthenticationKeySet {
	message SecretAuthenticationKeyTuple {
		required string urnPrefix 	= 1;
		required string key			= 2;
	}
	repeated SecretAuthenticationKeyTuple secretAuthenticationKeys = 1;
}

message SecretReservationKeySet {
	message SecretReservationKeyTuple {
		required string urnPrefix 	= 1;
		required string key 		= 2;
	}
	repeated SecretReservationKeyTuple secretReservationKeys = 1;
}

################################################
##################### SNAA #####################
################################################

message CredentialsSet {
 	message CredentialTriple {
		required string urnPrefix 	= 1;
		required string username 	= 2;
		required string password 	= 3;
	}
 	repeated CredentialTriple credentials = 4;
}

service SNAAService {
	rpc authenticate(CredentialsSet credentials) returns (boolean);
	rpc isAuthorized(SecretAuthenticationKeySet saks, string action) returns (boolean);
}



################################################
##################### RS #######################
################################################

message PublicReservationDataSet {
	repeated PublicReservationData reservations = 1;
}

# TODO replace fromDateTime, untilDateTime with type-safe variant
message ReservationDataÂ {
	required string fromDateTime 	= 1;
	required string untilDateTime 	= 2;
	repeated string nodeURNs 		= 3;
	required string userData 		= 4;
}

message ConfidentialReservationDataSet {	
	required ReservationData publicReservationData 	= 1;
	repeated SecretReservationKeySet secretReservationKeys 	= 2;
}

# TODO replace fromDateTime, untilDateTime with type-safe variant
# TODO add exceptions if unauthenticated, authentication fails
service RSService {

	# noauth
	rpc setAuthenticationData(
			SecretAuthenticationKeySet secretAuthenticationKeys)
			returns (void);

	# noauth
	rpc getReservations(
			string fromDateTime,
			string untilDateTime)
			returns(ReservationDataSet);

    # auth
    rpc getConfidentialReservations(
    		string fromDateTime,
    		string untilDateTime)
    		returns (ConfidentialReservationDataSet);

    # auth
    rpc getConfidentialReservation(
    		SecretReservationKeySet secretReservationKeys)
    		returns (ConfidentialReservationDataSet);

    # auth
    rpc deleteReservation(
    		SecretReservationKeySet secretReservationKeys)
    		returns (void);

    # auth
    rpc makeReservation(
			ReservationData reservationData)
			returns (SecretReservationKeySet);

}



################################################
##################### WSN ######################
################################################

# CONNECTION SETUP
# A client system connects to the WSNService by opening a new connection to the WSNService. Before the client system is
# allowed to execute management operations or to receive experiment outputs it has to:
#  1. authenticate itself by providing authentication data (by invoking setAuthenticationData) and
#  2. identify a running experiment by providing reservation data (through invocation of setReservationData).
#
# EXPERIMENT OUTPUT DELIVERY
# The client system will automatically be added as "listener" after the aforementioned connection setup step.
# Being a listener means that the WSNService will (after a short setup time) deliver experiment output messages to the
# client system if he implements the ControllerService interface and registered this service for the connection.
#
# CONTROLLING THE EXPERIMENT
# After connection setup the client system is allowed to invoke the management operations to control the currently
# active experiment.

message RequestID {
	required string id = 1;
}

message RequestStatusSet {
	message RequestStatus {
        required string nodeURN = 1;
        optional int32 value 	= 2;
        optional string msg 	= 3;
    }
    required RequestID requestID 	= 1;
    repeated RequestStatus statuses = 2;
}

message NodeURNSet {
	repeated string nodeURNs = 1;
}

message Program {
    message ProgramMetaData{
        required string version  = 1;
        required string name     = 2;
        required string platform = 3;
        required string other    = 4;
    }
	required bytes program            = 1;
	optional ProgramMetaData metaData = 2;
}

message Message {
    enum MessageLevel {
        TRACE = 0;
        DEBUG = 1;
        INFO  = 2;
        WARN  = 3;
        ERROR = 4;
        FATAL = 5;
    }
    message TextMessage {
        required string msg 				= 1;
        required MessageLevel messageLevel  = 2;
    }
    message BinaryMessage {
        required bytes binaryData = 1;
        required uint32 binaryType = 2;
    }
    required string sourceNodeId = 1;
    required string timestamp = 2;
    optional TextMessage textMessage = 3;
    optional BinaryMessage binaryMessage = 4;
}

message FilterSet {
	message Filter {
		required string names      = 1;
		repeated string parameters = 2;
	}
 	repeated Filter filters = 1;
}

message FilterChain {
	message Filter {
		message FilterParameter {
			required string key = 1;
			required string value = 2;
		}
		required string name = 1;
		repeated FilterParameter parameters = 2;
	}
	repeated Filter filters = 1;
}

message VirtualLinkParameters {
	repeated string parameters = 1;
}

service WSNService {

	# noauth
	rpc setAuthenticationData(
			SecretAuthenticationKeySet secretAuthenticationKeys)
			returns (void);

	# noauth
	rpc setReservationData(
			SecretReservationKeySet secretReservationKeys)
			returns (void);

	# noauth
	rpc getVersion()
			returns (string);

	# noauth
	rpc getFilters()
			returns (FilterSet);

	# auth
	rpc getNetwork()
			returns (string);

	# auth
	# TODO oneway? was ist dann mit exceptions?
    rpc send(
    		NodeURNSet nodeURNs,
    		Message message)
			returns (string);

    # auth
	rpc areNodesAlive(
			NodeURNSet nodeURNs)
			returns (string);

	# auth
	rpc destroyVirtualLink(
			string sourceNodeURN,
			string targetNodeURN)
			returns (string);

	# auth
	rpc disableNode(
			string nodeURN)
			returns (string);

	# auth
	rpc disablePhysicalLink(
			string firstNodeURN,
			string secondNodeURN)
			returns (string);

	# auth
	rpc enableNode(
			string nodeURN)
			returns (string);

	# auth
	rpc enablePhysicalLink(
			string firstNodeURN,
			string secondNodeURN)
			returns (string);

	# auth
	rpc flashPrograms(
			NodeURNSet nodeURNs,
			Program program)
			returns (string);

	# auth
	rpc resetNodes(
			NodeURNSet nodeURNs)
			returns (string);

	# auth
	# TODO find nice way to address remote service instance without giving authentication or reservation credentials of
	# remote system to this system
	rpc setVirtualLink(
			string sourceNodeURN,
			string targetNodeURN,
			string targetNodeHost,
			uint16 targetNodePort,
			FilterChain filterChain,
			VirtualLinkParameters virtualLinkParameters)
			returns (string);

}