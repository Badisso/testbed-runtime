///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, Institute of Telematics, University of Luebeck                                                //
// All rights reserved.                                                                                              //
//                                                                                                                   //
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the  //
// following conditions are met:                                                                                     //
//                                                                                                                   //
// - Redistributions of source code must retain the above copyright notice, this list of conditions and the following//
//   disclaimer.                                                                                                     //
// - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       //
//   following disclaimer in the documentation and/or other materials provided with the distribution.                //
// - Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or       //
//   promote products derived from this software without specific prior written permission.                          //
//                                                                                                                   //
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,//
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE     //
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,        //
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE//
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   //
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  //
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package de.uniluebeck.itm.tr.runtime.wsnapp;

option java_outer_classname = "WSNAppMessages";
option java_multiple_files = false;

message Link {
	required string sourceNodeUrn = 1;
	required string targetNodeUrn = 2;
}

message RequestStatus {
	required string nodeUrn = 1;
	optional int32 value    = 2;
	optional string msg     = 3;
}

message AreNodesAliveRequest {
	repeated string nodeUrns = 1;
}

message AreNodesConnectedRequest {
	repeated string nodeUrns = 1;
}

message FlashImageRequest {
	repeated string nodeUrns = 1;
	required bytes image     = 2;
}

message FlashDefaultImageRequest {
}

message ResetNodesRequest {
	repeated string nodeUrns = 1;
}

message Notification {
	optional string nodeUrn   = 1;
	required string timestamp = 2;
	required string msg       = 3;
}

message UpstreamMessage {
	required string sourceNodeUrn = 1;
	required string timestamp     = 2;
	required bytes messageBytes   = 3;
}

message DownstreamMessage {
	repeated string targetNodeUrns = 1;
	required bytes messageBytes    = 2;
}

message SetVirtualLinksRequest {
	repeated Link links = 1;
}

message DestroyVirtualLinksRequest {
	repeated Link links = 1;
}

message DisableNodesRequest {
	repeated string nodeUrns = 1;
}

message EnableNodesRequest {
	repeated string nodeUrns = 1;
}

message DisablePhysicalLinksRequest {
	repeated Link links = 1;
}

message EnablePhysicalLinksRequest {
	repeated Link links = 2;
}

message SetChannelPipelineRequest {
	message ChannelHandlerConfiguration {
		message KeyValuePair {
			required string key = 1;
			required string value = 2;
		}
        required string name = 1;
        repeated KeyValuePair configuration = 2;
	}
    repeated ChannelHandlerConfiguration channelHandlerConfigurations = 1;
}

message SetDefaultChannelPipelineRequest {
}

message Invocation {
    enum Type {
        SEND_DOWNSTREAM              = 1;
		SEND_UPSTREAM                = 2;
        ARE_NODES_ALIVE              = 3;
		ARE_NODES_CONNECTED          = 4;
        FLASH_PROGRAMS               = 5;
		FLASH_DEFAULT_IMAGE          = 6;
        RESET_NODES                  = 7;
        SET_VIRTUAL_LINK             = 8;
		DESTROY_VIRTUAL_LINK         = 9;
        DISABLE_NODE                 = 10;
        ENABLE_NODE                  = 11;
        DISABLE_PHYSICAL_LINK        = 12;
        ENABLE_PHYSICAL_LINK         = 13;
        SET_CHANNEL_PIPELINE         = 14;
        SET_DEFAULT_CHANNEL_PIPELINE = 15;
    }
    required Type                             type                             = 1;
	optional DownstreamMessage                downstreamMessage                = 2;
    optional UpstreamMessage                  upstreamMessage                  = 3;
	optional AreNodesAliveRequest             areNodesAliveRequest             = 4;
	optional AreNodesConnectedRequest         areNodesConnectedRequest         = 5;
	optional FlashImageRequest                flashImageRequest                = 6;
	optional FlashDefaultImageRequest         flashDefaultImageRequest         = 7;
	optional ResetNodesRequest                resetNodesRequest                = 8;
	optional SetVirtualLinksRequest           setVirtualLinksRequest           = 9;
	optional DestroyVirtualLinksRequest       destroyVirtualLinksRequest       = 10;
	optional DisableNodesRequest              disableNodesRequest              = 11;
	optional EnableNodesRequest               enableNodesRequest               = 12;
	optional DisablePhysicalLinksRequest      disablePhysicalLinksRequest      = 13;
	optional EnablePhysicalLinksRequest       enablePhysicalLinksRequest       = 14;
	optional SetChannelPipelineRequest        setChannelPipelineRequest        = 15;
	optional SetDefaultChannelPipelineRequest setDefaultChannelPipelineRequest = 16;
}
