  Testbed Runtime 0.5.2-SNAPSHOT

CONTENT

  - TR :: SNAA API
  - TR :: SNAA Commandline Client
  - TR :: SNAA Commandline Server
  - TR :: SNAA Dummy Implementation
  - TR :: SNAA Federator
  - TR :: SNAA JAASLogin
  - TR :: SNAA Shibboleth Implementation
  - TR :: SNAA WISEBED (federator and backend)

WHAT IS 'SNAA'?

  The SNAA (Sensor Network Authentication and Authorizing) implements a system that is responsible for
  authenticating users and authorizing a set of actions of a specific user.

  The set of implementations allow machine-driven authentication against
  Shibboleth [1] federations, all backends of the Java Authentication and Authorization API including
  Kerberos, Unix, Windows, Solaris, PAM, Htpasswd files and include two types of federators
  (WISEBED federator, Generic federator, a Dummy module, a command-line client to start
  the servers and a command-line client for authentication.

  The different types of implementations serve several purposes.
  First, they show the APIï¿½s generality allowing for a wide range of different implementations.
  Second, it gives providers of testbeds the choice amongst several options and they may
  choose whatever best fits their current infrastructure and purpose of the testbed.
  Third, it demonstrates that the APIs are independent from specific WISEBED technology.
  Finally, the federator implementation demonstrates that the same API can be used
  to federate several testbeds to virtually create a larger one that appears as a
  single testbed to users of the federator.

BUILDING

  SNAA is based on the Apache Maven 2 [2] build system.
  Simply run 'mvn package' or 'mvn install' for building the appropriate module.

RUNNING

  For executing the SNAA-Server in a commandline environment you'll find a module called
  'TR :: SNAA Commandline Server' in its subfolder 'snaa-cmdline-server'.
  For executing the SNAA-Client you'll find the module
  'TR :: SNAA Commandline Client' in its subfolder 'snaa-cmdline-client'.
  Just delegate to the appropriate subfolder and call 'mvn package' or 'mvn install'.
  Afterwards you'll find the executable jar in the target directory.

  Options:
    TR :: SNAA Commandline Client:
      Calling the jar file there are 9 different options:
        -a,--action <arg>          Action string for authorization operation, defaults to: reserve
        -h,--help                  Help output
        -l,--url <arg>             URL of the SNAA, defaults to http://127.0.0.1:8080/snaa/dummy1
        -o,--operation <arg>       Operation to perform, possible values: [authenticate, authorize]
        -p,--password <arg>        Password
        -s,--secretauthkey <arg>   Secret auth key for authorization option, defauls to dummy-secret-key
        -u,--username <arg>        Username
        -v,--verbose               Verbose logging output
        -x,--urnprefix <arg>       URN Prefix, defaults to urn:wisebed:dummy

    TR :: SNAA Commandline Server:
      Calling the jar file there are 3 different options:
        -f,--file <arg>   The properties file
        -h,--help         Help output
        -v,--verbose      Verbose logging output

  Properties file:

    TR :: SNAA Commandline Client:
      Setting up your SNAA Client environment you just need to add the options to the commandline
      input, e.g. for using the current snapshot with a sample username and password just call\
      'java -jar target/tr.snaa-cmdline-client-0.5.2-SNAPSHOT.one-jar.jar -u username -p password'

    TR :: SNAA Commandline Server:
      Setting up your SNAA Server environment you need to specify a configuration file. There is a sample
      configuration file located in the configs subfolder of the 'SNAA Commandline Server' module including
      a small description of possible properties and their meanings.

      For using your properties file simply add it to the commandline input, e.g. for using the current
      snapshot with the sample-properties file in the configs-folder just call
     'java -jar target/tr.snaa-cmdline-server-0.5.2-SNAPSHOT.one-jar.jar -f configs/sample.properties'


The modules are made open-source under the terms of the BSD license, was created and is
maintained by the Institute of Telematics, University of Luebeck, Germany.

REFERENCES

  [1] http://shibboleth.internet2.edu
  [2] http://maven.apache.org/
  [3] https://www.itm.uni-luebeck.de/projects/testbed-runtime/
